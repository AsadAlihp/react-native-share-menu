//
//  ShareViewController.swift
//  RNShareMenu
//
//  DO NOT EDIT THIS FILE. IT WILL BE OVERRIDEN BY NPM OR YARN.
//
//  Created by Gustavo Parreira on 26/07/2020.
//
//  Modified by Veselin Stoyanov on 17/04/2021.

import Foundation
import MobileCoreServices
import UIKit
import Social
import RNShareMenu
import os.log

class ShareViewController: SLComposeServiceViewController {
  var hostAppId: String?
  var hostAppUrlScheme: String?
  var sharedItems: [Any] = []
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    if let hostAppId = Bundle.main.object(forInfoDictionaryKey: HOST_APP_IDENTIFIER_INFO_PLIST_KEY) as? String {
      self.hostAppId = hostAppId
    } else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
    }
    
    if let hostAppUrlScheme = Bundle.main.object(forInfoDictionaryKey: HOST_URL_SCHEME_INFO_PLIST_KEY) as? String {
      self.hostAppUrlScheme = hostAppUrlScheme
    } else {
      print("Error: \(NO_INFO_PLIST_URL_SCHEME_ERROR)")
    }
  }

    override func isContentValid() -> Bool {
        // Do validation of contentText and/or NSExtensionContext attachments here
        return true
    }

    override func didSelectPost() {
        // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
      guard let items = extensionContext?.inputItems as? [NSExtensionItem] else {
        cancelRequest()
        return
      }

      handlePost(items)
    }

    override func configurationItems() -> [Any]! {
        // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
        didSelectPost()
        return nil
    }

  func handlePost(_ items: [NSExtensionItem], extraData: [String:Any]? = nil) {
    DispatchQueue.global().async {
      guard let hostAppId = self.hostAppId else {
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      NSLog("RCVC: handlePost 0")
      
      guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }

      if let data = extraData {
        self.storeExtraData(data)
      } else {
        self.removeExtraData()
      }
      
      NSLog("RCVC: handlePost 2")

      let semaphore = DispatchSemaphore(value: 0)
      var results: [Any] = []
      NSLog("RCVC: handlePost 3")
      NSLog("RCVC: %@",items)
      

      for item in items {
        NSLog("RCVC: handlePost 3.1 %@", item)
        guard let attachments = item.attachments else {
          self.cancelRequest()
          return
        }
        NSLog("RCVC: handlePost 3.2 %@", attachments)

        for provider in attachments {
          NSLog("RCVC: handlePost 3.3 %@", provider)

          if provider.isText {
            NSLog("RCVC: handlePost 3.4 isText")
            self.storeText(withProvider: provider, semaphore)
          } else if provider.isURL {
            NSLog("RCVC: handlePost 3.4 isURL")
            self.storeUrl(withProvider: provider, semaphore)
          }
          // else if provider.isFileURL {
          //   NSLog("RCVC: handlePost 3.4 isFileURL")
          //   self.storeUrl(withProvider: provider, semaphore)
          // } 
          else {
            NSLog("RCVC: handlePost 3.4 isOther (file)")
            self.storeFile(withProvider: provider, semaphore)
          }

          semaphore.wait()
        }
      }

      userDefaults.set(self.sharedItems,
                       forKey: USER_DEFAULTS_KEY)
      userDefaults.synchronize()
      NSLog("RCVC: handlePost 5")

      self.openHostApp()
    }
  }

  func storeExtraData(_ data: [String:Any]) {
    guard let hostAppId = self.hostAppId else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      print("Error: \(NO_APP_GROUP_ERROR)")
      return
    }
    userDefaults.set(data, forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }

  func removeExtraData() {
    guard let hostAppId = self.hostAppId else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      print("Error: \(NO_APP_GROUP_ERROR)")
      return
    }
    userDefaults.removeObject(forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }
  
  func storeText(withProvider provider: NSItemProvider, _ semaphore: DispatchSemaphore) {
    provider.loadItem(forTypeIdentifier: kUTTypeText as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let text = data as? String else {
        self.exit(withError: COULD_NOT_FIND_STRING_ERROR)
        return
      }
      
      self.sharedItems.append([DATA_KEY: text, MIME_TYPE_KEY: "text/plain"])
      semaphore.signal()
    }
  }
  
  func storeUrl(withProvider provider: NSItemProvider, _ semaphore: DispatchSemaphore) {
    provider.loadItem(forTypeIdentifier: kUTTypeURL as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_URL_ERROR)
        return
      }
      
      self.sharedItems.append([DATA_KEY: url.absoluteString, MIME_TYPE_KEY: "unknown_type"])
      semaphore.signal()
    }
  }
  
  func storeFile(withProvider provider: NSItemProvider, _ semaphore: DispatchSemaphore) {
    NSLog("RCVC: storeFile 1")
    provider.loadItem(forTypeIdentifier: kUTTypeData as String, options: nil) { (data, error) in

      guard (error == nil) else {
        NSLog("RCVC: storeFile 2 %@", error.debugDescription)
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        NSLog("RCVC: storeFile 3 %@", COULD_NOT_FIND_IMG_ERROR)
        self.exit(withError: COULD_NOT_FIND_IMG_ERROR)
        return
      }
      guard let hostAppId = self.hostAppId else {
        NSLog("RCVC: storeFile 4 %@", NO_INFO_PLIST_INDENTIFIER_ERROR)
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      NSLog("RCVC: storeFile 1")
      guard let groupFileManagerContainer = FileManager.default
              .containerURL(forSecurityApplicationGroupIdentifier: "group.\(hostAppId)")
      else {
        NSLog("RCVC: storeFile 5 %@", NO_APP_GROUP_ERROR)
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      NSLog("RCVC: storeFile url path %@", url.path)

      let mimeType = url.extractMimeType()
      NSLog("RCVC: storeFile  mimeType %@", mimeType)
      let fileExtension = url.pathExtension
      let fileName = UUID().uuidString
      let filePath = groupFileManagerContainer
        .appendingPathComponent("\(fileName).\(fileExtension)")
      NSLog("RCVC: storeFile  fileName %@", fileName)

      guard self.moveFileToDisk(from: url, to: filePath) else {
        NSLog("RCVC: storeFile  %@", COULD_NOT_SAVE_FILE_ERROR)
        self.exit(withError: COULD_NOT_SAVE_FILE_ERROR)
        return
      }
      NSLog("RCVC: storeFile7")

      self.sharedItems.append([DATA_KEY: filePath.absoluteString, MIME_TYPE_KEY: mimeType])
      NSLog("RCVC: storeFile8")

      semaphore.signal()
    }
  }

  func moveFileToDisk(from srcUrl: URL, to destUrl: URL) -> Bool {
    do {
      if FileManager.default.fileExists(atPath: destUrl.path) {
        try FileManager.default.removeItem(at: destUrl)
      }
      try FileManager.default.copyItem(at: srcUrl, to: destUrl)
    } catch (let error) {
      print("Could not save file from \(srcUrl) to \(destUrl): \(error)")
      return false
    }
    
    return true
  }
  
  func exit(withError error: String) {
    print("Error: \(error)")
    cancelRequest()
  }
  
  internal func openHostApp() {
    NSLog("RCVC: openHostApp 0")

    guard let urlScheme = self.hostAppUrlScheme else {
      exit(withError: NO_INFO_PLIST_URL_SCHEME_ERROR)
      return
    }
    NSLog("RCVC: openHostApp 1")

    let url = URL(string: urlScheme)
    let selectorOpenURL = sel_registerName("openURL:")
    var responder: UIResponder? = self
    NSLog("RCVC: openHostApp 2")

    while responder != nil {
      if responder?.responds(to: selectorOpenURL) == true {
        responder?.perform(selectorOpenURL, with: url)
      }
      responder = responder!.next
    }
    NSLog("RCVC: openHostApp 3")

    completeRequest()
  }
  
  func completeRequest() {
    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.
    extensionContext!.completeRequest(returningItems: [], completionHandler: nil)
  }
  
  func cancelRequest() {
    extensionContext!.cancelRequest(withError: NSError())
  }

}
